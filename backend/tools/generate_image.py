import os
import uuid
from openai import OpenAI

def generate_image(prompt: str, style: str = "professional", aspect_ratio: str = "16:9") -> dict:
    """
    Generate an image using OpenAI's GPT-Image-1 API based on the prompt and style.
    prompt (str): Detailed description of the image to generate.
    style (str): Visual style for the image (professional, infographic, modern, minimalist, tech-focused, corporate).
    aspect_ratio (str): Aspect ratio for the image (16:9, 1:1, 4:5).
    Returns: dict: Dictionary containing image data and metadata.
    """
    print(f"Tool: Generating image with prompt: '{prompt}', style: '{style}', aspect_ratio: '{aspect_ratio}'")
    
    try:
        # Get OpenAI API key from environment
        openai_api_key = os.getenv('OPENAI_API_KEY')
        if not openai_api_key:
            return {"error": "OPENAI_API_KEY not found in environment variables. Please set your OpenAI API key."}
        
        # Initialize OpenAI client
        client = OpenAI(api_key=openai_api_key)
        
        # Map aspect ratios to supported sizes
        size_mapping = {
            "1:1": "1024x1024",
            "16:9": "1536x1024",  # Landscape
            "4:5": "1024x1536"    # Portrait (closest to 4:5)
        }
        
        # Get the appropriate size, default to 16:9 if not found
        image_size = size_mapping.get(aspect_ratio, "1536x1024")
        
        # Enhance prompt with style guidelines
        style_enhancements = {
            "The image should not contain any words."
        }
        
        enhanced_prompt = f"{prompt}. Note: {style_enhancements}"
        
        # Generate image using gpt-image-1 (returns base64 by default)
        response = client.images.generate(
            model="gpt-image-1",
            prompt=enhanced_prompt,
            size=image_size,
            quality="low",  # Use low quality for cost efficiency
            n=1,
        )
        
        # Return base64 data for frontend use
        if response.data and len(response.data) > 0:
            image_base64 = response.data[0].b64_json
            
            # Generate unique filename for frontend
            image_filename = f"generated_{uuid.uuid4().hex[:8]}.png"
            
            print(f"Tool: Image generated successfully")
            
            return {
                "success": True,
                "filename": image_filename,
                "size": image_size,
                "style": style,
                "aspect_ratio": aspect_ratio,
                "prompt": prompt,
                "base64_data": image_base64
            }
        else:
            return {"error": "No image was generated by gpt-image-1."}
            
    except Exception as e:
        error_message = f"Error generating image: {str(e)}"
        print(f"Tool generate_image error: {error_message}")
        return {"error": error_message} 