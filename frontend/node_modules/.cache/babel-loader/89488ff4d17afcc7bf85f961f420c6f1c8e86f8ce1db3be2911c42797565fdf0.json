{"ast":null,"code":"import axios from 'axios';\n\n// Base API configuration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 300000,\n  // 5 minutes timeout for long-running operations\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napiClient.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to: ${config.url}`);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// User Queries API\nexport const userQueriesAPI = {\n  generateContent: async prompt => {\n    try {\n      const response = await apiClient.post('/queries/generate', {\n        prompt: prompt\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Failed to generate content');\n    }\n  },\n  generateContentStream: async (prompt, onMessage) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/queries/generate-stream`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: prompt\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to start streaming');\n      }\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) break;\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = JSON.parse(line.slice(6));\n              onMessage(data);\n            } catch (e) {\n              console.warn('Failed to parse SSE data:', line);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      throw new Error('Streaming failed: ' + error.message);\n    }\n  },\n  getStatus: async () => {\n    try {\n      const response = await apiClient.get('/user_queries/status');\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || 'Failed to get status');\n    }\n  }\n};\n\n// Uploads API\nexport const uploadsAPI = {\n  uploadMultiple: async (files, onProgress) => {\n    try {\n      const formData = new FormData();\n      files.forEach(file => {\n        formData.append('files', file);\n      });\n      const response = await apiClient.post('/uploads/upload-multiple', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        onUploadProgress: progressEvent => {\n          if (onProgress && progressEvent.total) {\n            const progress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n            onProgress(progress);\n          }\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.detail) || 'Failed to upload files');\n    }\n  },\n  listDocuments: async () => {\n    try {\n      const response = await apiClient.get('/uploads/list');\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.detail) || 'Failed to list documents');\n    }\n  },\n  deleteDocument: async documentId => {\n    try {\n      const response = await apiClient.delete(`/uploads/delete/${documentId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.detail) || 'Failed to delete document');\n    }\n  },\n  getHealth: async () => {\n    try {\n      const response = await apiClient.get('/uploads/health');\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.detail) || 'Failed to get upload service health');\n    }\n  }\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","_error$response","data","message","userQueriesAPI","generateContent","prompt","post","_error$response2","_error$response2$data","Error","detail","generateContentStream","onMessage","fetch","body","JSON","stringify","ok","reader","getReader","decoder","TextDecoder","done","value","read","chunk","decode","lines","split","line","startsWith","parse","slice","e","warn","getStatus","get","_error$response3","_error$response3$data","uploadsAPI","uploadMultiple","files","onProgress","formData","FormData","forEach","file","append","onUploadProgress","progressEvent","total","progress","Math","round","loaded","_error$response4","_error$response4$data","listDocuments","_error$response5","_error$response5$data","deleteDocument","documentId","delete","_error$response6","_error$response6$data","getHealth","_error$response7","_error$response7$data"],"sources":["/Users/danielrosario/Desktop/CodeProjects/AudienceAI/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Base API configuration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 300000, // 5 minutes timeout for long-running operations\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\napiClient.interceptors.request.use(\n  (config) => {\n    console.log(`Making ${config.method?.toUpperCase()} request to: ${config.url}`);\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napiClient.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\n// User Queries API\nexport const userQueriesAPI = {\n  generateContent: async (prompt) => {\n    try {\n      const response = await apiClient.post('/queries/generate', {\n        prompt: prompt\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Failed to generate content');\n    }\n  },\n\n  generateContentStream: async (prompt, onMessage) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/queries/generate-stream`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ prompt: prompt })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to start streaming');\n      }\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = JSON.parse(line.slice(6));\n              onMessage(data);\n            } catch (e) {\n              console.warn('Failed to parse SSE data:', line);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      throw new Error('Streaming failed: ' + error.message);\n    }\n  },\n\n  getStatus: async () => {\n    try {\n      const response = await apiClient.get('/user_queries/status');\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Failed to get status');\n    }\n  }\n};\n\n// Uploads API\nexport const uploadsAPI = {\n  uploadMultiple: async (files, onProgress) => {\n    try {\n      const formData = new FormData();\n      files.forEach((file) => {\n        formData.append('files', file);\n      });\n\n      const response = await apiClient.post('/uploads/upload-multiple', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n        onUploadProgress: (progressEvent) => {\n          if (onProgress && progressEvent.total) {\n            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n            onProgress(progress);\n          }\n        }\n      });\n\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Failed to upload files');\n    }\n  },\n\n  listDocuments: async () => {\n    try {\n      const response = await apiClient.get('/uploads/list');\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Failed to list documents');\n    }\n  },\n\n  deleteDocument: async (documentId) => {\n    try {\n      const response = await apiClient.delete(`/uploads/delete/${documentId}`);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Failed to delete document');\n    }\n  },\n\n  getHealth: async () => {\n    try {\n      const response = await apiClient.get('/uploads/health');\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Failed to get upload service health');\n    }\n  }\n};\n\nexport default apiClient; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}